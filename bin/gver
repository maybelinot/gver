#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: Eduard Trott
# @Date:   2015-09-17 13:10:09
# @Email:  etrott@redhat.com
# @Last modified by:   etrott
# @Last Modified time: 2015-09-17 13:15:50

from __future__ import absolute_import  # , unicode_literals

# INTERNAL PYTHON MODULES
import argparse
import logging
from datetime import datetime as dt
import httplib2
from apiclient import errors
from apiclient import discovery
from apiclient.http import MediaFileUpload
import pprint

from gutile import gfiles
from gver.utils import logr, get_credentials, config, update_config, export_local_file, import_local_file
# from gver.gfiles import get_file_id
from gver.gver import *

pp = pprint.PrettyPrinter(indent=4)


def parse_cli():
    '''
    gver "public" CLI API
    '''
    # Setup the argparser
    parser = argparse.ArgumentParser(
        description='Control version of Google files')

    parser.add_argument('FILE', help='Full path to file or file id')

    subparsers = parser.add_subparsers(dest='act', help="Actions")

    checkout = subparsers.add_parser('checkout')
    checkout.add_argument('version', help='File version name')
    checkout.add_argument('-n', '--new', action='store_true',
                          help="Create new version")

    sync = subparsers.add_parser('sync')

    status = subparsers.add_parser('status')
    status.add_argument('version', help='File name', nargs='?')

    call = subparsers.add_parser('call')
    call.add_argument('name', help='File name')

    download = subparsers.add_parser('download')
    download.add_argument('format', help='Export format', choices=[
                          'txt', 'docx', 'html', 'odt', 'pdf', 'rtf'], default='txt')
    download.add_argument('-o', metavar='o', nargs='?',
                          dest='output', help='Output file')

    remove = subparsers.add_parser('remove')
    remove.add_argument('version', help='File version name')

    upload = subparsers.add_parser('upload')
    upload.add_argument('format', help='Upload format', choices=[
        'txt', 'docx', 'html', 'odt', 'pdf', 'rtf'], default='txt')
    upload.add_argument('-i', metavar='i', nargs='*',
                        dest='input', help='Input file')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help="turn verbose logging ON")
    parser.add_argument('-d', '--debug', action='store_true',
                        help="turn debug logging ON")
    args = vars(parser.parse_args())  # parse and load args as a dict

    # Go ahead and deal with logging debug/verbosity setting
    if args['debug']:
        # logr = logging.getLogger()  # get root logger
        logr.setLevel(logging.DEBUG)
    elif args['verbose']:
        logr.setLevel(logging.INFO)
    else:
        logr.setLevel(logging.WARN)

    return args


def get_file_versions(config, file_id):
    return [i['ver'].keys() for _, i in config.iteritems() if _ == file_id][0]


def get_active_version(config, file_id):
    versions = get_file_versions(config, file_id)
    return [ver for ver in versions if config[file_id]['ver'][ver]['active']][0]


def get_file_id(filename, config, service, credentials):
    if filename in [i['name'] for _, i in config.iteritems()
                    if 'name' in i.keys()]:
        return [_ for _, i in config.iteritems()
                if 'name' in i.keys() and i['name'] == filename][0]
    try:
        # if gfile is file_id
        service.files().get(fileId=filename).execute()
        return filename
    except:
        # else look for file_id in drive

        return gfiles.get_file_id(credentials, filename)

if __name__ == "__main__":
    # Load the user config file from their home directory
    args = parse_cli()

    filename = args['FILE']

    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('drive', 'v2', http=http)

    file_id = get_file_id(filename, config, service, credentials)

    if not file_id:
        raise RuntimeError('File %s does not exist' % (filename))

    # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # # UPLOAD/DOWLOAD SOLUTION
    current_file = get_file(service, file_id)

    map_formats = {'pdf': 'application/pdf',
                   'rtf': 'application/rtf',
                   'odt': 'application/vnd.oasis.opendocument.text',
                   'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                   'html': 'text/html',
                   'txt': 'text/plain'}

    if args['act'] == "call":
        if file_id not in config:
            raise RuntimeError("File %s does not synced" % (file_id))
        config[file_id]['name'] = args['name']

    elif args['act'] == "status":
        if args['version']:
            if args['version'] in config[file_id]['ver'].keys():
                print "Active: {}".format(config[file_id]['ver'][args['version']]['active'])
                print "Created: {}".format(config[file_id]['ver'][args['version']]['createdDate'])
                print "Modified: {}".format(config[file_id]['ver'][args['version']]['modifiedDate'])
            else:
                raise RuntimeError("Version does not exist")
        else:
            if file_id not in config:
                raise RuntimeError("File %s does not synced" % (file_id))
            versions = get_file_versions(config, file_id)
            print "On version '{}'".format([ver for ver in versions if config[file_id]['ver'][ver]['active']][0])
            print "All versions:"
            print '\n'.join("'%s'" % (ver) for ver in versions)

    elif args['act'] == "sync":
        if file_id not in config:
            config[file_id] = {}
            config[file_id]['ver'] = {}
            config[file_id]['ver']['master'] = {}
            config[file_id]['ver']['master'][
                'data'] = export_local_file(current_file)
            config[file_id]['ver']['master']['active'] = True
            config[file_id]['ver']['master']['createdDate'] = dt.utcnow()

    elif args['act'] == "checkout":
        if file_id not in config:
            raise RuntimeError("File %s does not synced" % (file_id))
        to_deact = get_active_version(config, file_id)
        if to_deact == args['version']:
            raise RuntimeError("Already on %s version" % (args['version']))
        if args['new']:
            if args['version'] not in config[file_id]['ver'].keys():
                config[file_id]['ver'][args['version']] = {}
                config[file_id]['ver'][args['version']][
                    'data'] = export_local_file(current_file)
                config[file_id]['ver'][args['version']]['active'] = True
                config[file_id]['ver'][args['version']][
                    'createdDate'] = dt.utcnow()
                config[file_id]['ver'][args['version']][
                    'modifiedDate'] = dt.utcnow()
                # config[file_id]['ver'][to_deact]['data'] = export_local_file(current_file)
                config[file_id]['ver'][to_deact]['active'] = False
                config[file_id]['ver'][to_deact]['modifiedDate'] = dt.utcnow()
            else:
                raise RuntimeError("Version already exist")
        else:
            if args['version'] in config[file_id]['ver'].keys():
                path = os.path.join(os.path.expanduser(
                    '~/.gver/'), config[file_id]['ver'][to_deact]['data'])
                if os.path.exists(path):
                    os.remove(path)
                config[file_id]['ver'][to_deact][
                    'data'] = export_local_file(current_file)
                config[file_id]['ver'][to_deact]['active'] = False
                config[file_id]['ver'][to_deact]['modifiedDate'] = dt.utcnow()
                file_content = import_local_file(
                    config[file_id]['ver'][args['version']]['data'])
                update_file(service, file_id, file_content)
                config[file_id]['ver'][args['version']]['active'] = True
            else:
                raise RuntimeError("Version does not exist")
    elif args['act'] == "download":
        output_file = args['output']
        downloadUrl = current_file[1].get(
            'exportLinks')[map_formats[args['format']]]

        resp, content = service._http.request(downloadUrl)

        if output_file:
            with open(output_file, 'wb') as f:
                f.write(content)
        else:
            print(content)
    elif args['act'] == "upload":
        input_file = args['input'][0]
        media = MediaFileUpload(
            input_file, mimetype=map_formats[args['format']])
        update_file(service, file_id, (media, None))
        version = get_active_version(config, file_id)
    elif args['act'] == "remove":
        if file_id not in config:
            raise RuntimeError("File %s does not synced" % (file_id))
        if args['version'] == get_active_version(config, file_id):
            raise RuntimeError("Can not delete current version" % (file_id))
        file_to_delete = config[file_id]['ver'][args['version']]['data']
        path = os.path.join(os.path.expanduser('~/.gver/'), file_to_delete)
        if os.path.exists(path):
            os.remove(path)
        del config[file_id]['ver'][args['version']]

    # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    update_config(config)
