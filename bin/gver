#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: Eduard Trott
# @Date:   2015-09-17 13:10:09
# @Email:  etrott@redhat.com
# @Last modified by:   etrott
# @Last Modified time: 2015-09-17 13:15:50

from __future__ import absolute_import  # , unicode_literals

# INTERNAL PYTHON MODULES
import argparse
import logging
from datetime import datetime as dt
import httplib2
from apiclient import errors
from apiclient import discovery
import pprint

from gver.utils import logr, get_credentials, config, update_config
from gver.gfiles import get_file_id
from gver.gver import *

pp = pprint.PrettyPrinter(indent=4)


def parse_cli():
    '''
    gver "public" CLI API
    '''
    # Setup the argparser
    parser = argparse.ArgumentParser(
        description='Control version of Google files')

    parser.add_argument('FILE', help='Full path to file or file id')

    subparsers = parser.add_subparsers(dest='act', help="Actions")

    checkout = subparsers.add_parser('checkout')

    checkout.add_argument('version', help='File version name')
    checkout.add_argument('-n', '--new', action='store_true',
                          help="Create new version")
    sync = subparsers.add_parser('sync')

    status = subparsers.add_parser('status')
    status.add_argument('version', help='File name', nargs='?')

    call = subparsers.add_parser('call')
    call.add_argument('name', help='File name')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help="turn verbose logging ON")
    parser.add_argument('-d', '--debug', action='store_true',
                        help="turn debug logging ON")
    args = vars(parser.parse_args())  # parse and load args as a dict

    # Go ahead and deal with logging debug/verbosity setting
    if args['debug']:
        # logr = logging.getLogger()  # get root logger
        logr.setLevel(logging.DEBUG)
    elif args['verbose']:
        logr.setLevel(logging.INFO)
    else:
        logr.setLevel(logging.WARN)

    return args


def get_file_versions(file_id, config):
    return [i['ver'].keys() for _, i in config.iteritems() if _ == file_id][0]


def get_file_id(filename, config, service, credentials):
    if filename in [i['name'] for _, i in config.iteritems()
                    if 'name' in i.keys()]:
        return [_ for _, i in config.iteritems()
                if 'name' in i.keys() and i['name'] == filename][0]
    try:
        # if gfile is file_id
        service.files().get(fileId=filename).execute()
        return filename
    except:
        # else look for file_id in drive
        return get_file_id(credentials, filename)

if __name__ == "__main__":
    # Load the user config file from their home directory
    args = parse_cli()

    filename = args['FILE']

    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('drive', 'v2', http=http)

    file_id = get_file_id(filename, config, service, credentials)

    if not file_id:
        raise RuntimeError('File %s does not exist' % (filename))

    # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # # UPLOAD/DOWLOAD SOLUTION
    old_file = get_file(http, file_id)

    if args['act'] == "call":
        if file_id not in config:
            raise RuntimeError("File %s does not synced" % (file_id))
        config[file_id]['name'] = args['name']

    elif args['act'] == "status":
        if args['version']:
            if args['version'] in config[file_id]['ver'].keys():
                print "Active: {}".format(config[file_id]['ver'][args['version']]['active'])
                print "Created: {}".format(config[file_id]['ver'][args['version']]['createdDate'])
                print "Modified: {}".format(config[file_id]['ver'][args['version']]['modifiedDate'])
            else:
                raise RuntimeError("Version does not exist")
        else:
            if file_id not in config:
                raise RuntimeError("File %s does not synced" % (file_id))
            versions = get_file_versions(file_id, config)
            print "On version '{}'".format([ver for ver in versions if config[file_id]['ver'][ver]['active']][0])
            print "All versions:"
            print '\n'.join("'%s'" % (ver) for ver in versions)

    elif args['act'] == "sync":
        if file_id not in config:
            config[file_id] = {}
            config[file_id]['ver'] = {}
            config[file_id]['ver']['master'] = {}
            config[file_id]['ver']['master']['data'] = old_file
            config[file_id]['ver']['master']['active'] = True
            config[file_id]['ver']['master']['createdDate'] = dt.utcnow()

    elif args['act'] == "checkout":
        if file_id not in config:
            raise RuntimeError("File %s does not synced" % (file_id))
        for ver in config[file_id]['ver']:
            if config[file_id]['ver'][ver]['active']:
                to_deact = ver
        if args['new']:
            if args['version'] not in config[file_id]['ver'].keys():
                config[file_id]['ver'][args['version']] = {}
                config[file_id]['ver'][args['version']]['data'] = old_file
                config[file_id]['ver'][args['version']]['active'] = True
                config[file_id]['ver'][args['version']]['createdDate'] = dt.utcnow()
                config[file_id]['ver'][args['version']]['modifiedDate'] = dt.utcnow()
                config[file_id]['ver'][to_deact]['data'] = old_file
                config[file_id]['ver'][to_deact]['active'] = False
                config[file_id]['ver'][to_deact]['modifiedDate'] = dt.utcnow()
            else:
                raise RuntimeError("Version already exist")
        else:
            if args['version'] in config[file_id]['ver'].keys():
                config[file_id]['ver'][to_deact]['data'] = old_file
                config[file_id]['ver'][to_deact]['active'] = False
                config[file_id]['ver'][to_deact]['modifiedDate'] = dt.utcnow()
                file_content = config[file_id]['ver'][args['version']]['data']
                update_file(service, file_id, file_content)
                config[file_id]['ver'][args['version']]['active'] = True
            else:
                raise RuntimeError("Version does not exist")

    # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    update_config(config)
